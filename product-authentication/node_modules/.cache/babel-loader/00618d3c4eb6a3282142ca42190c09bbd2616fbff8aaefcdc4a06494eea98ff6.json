{"ast":null,"code":"import React,{useState}from'react';import web3 from'../SC/web3';import contract from'../SC/contract';import{useNavigate}from'react-router-dom';import'../css_files/mint.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const MintProductPage=()=>{const[serial,setSerial]=useState('');const[name,setName]=useState('');const[description,setDescription]=useState('');const[manufactureDate,setManufactureDate]=useState('');const[result,setResult]=useState('');const navigate=useNavigate();const mintProduct=async event=>{event.preventDefault();try{const accounts=await web3.eth.getAccounts();if(accounts.length===0){setResult(\"No accessible accounts. Make sure MetaMask is connected.\");return;}const userAddress=accounts[0];if(isNaN(serial)){setResult(\"Invalid serial number. Please enter a numeric value.\");return;}const product={name:name,description:description,serialNumber:serial,manufactureDate:manufactureDate};await contract.methods.mintProduct(userAddress,serial,product).send({from:userAddress});setResult(\"Product minted successfully\");//THIS FOLLOWING CODE IS FOR VIEWING THE INFORMATION OF THE BLOCK\n// const mintResult = await contract.methods.mintProduct(userAddress, serial, product).send({ from: userAddress });   \n// const jsonHandler = (key, value) => \n//     typeof value === 'bigint' ? value.toString() : value;          \n// setResult(`Product minted successfully: ${JSON.stringify(mintResult, jsonHandler)}`);\n}catch(error){console.error('Error minting product:',error);setResult(\"Failed to mint product: \".concat(error.message));}};const goToManufacturerDashboard=()=>{navigate('/manufacturer-dashboard');};return/*#__PURE__*/_jsxs(\"div\",{className:\"mint-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Mint Product\"}),/*#__PURE__*/_jsx(\"div\",{className:\"form-container\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:mintProduct,children:[/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",value:serial,onChange:e=>setSerial(e.target.value),placeholder:\"Serial Number\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",value:name,onChange:e=>setName(e.target.value),placeholder:\"Product Name\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",value:description,onChange:e=>setDescription(e.target.value),placeholder:\"Product Description\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",value:manufactureDate,onChange:e=>setManufactureDate(e.target.value),placeholder:\"Manufacture Date\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",type:\"submit\",children:\"Mint Product\"})]})}),result&&/*#__PURE__*/_jsx(\"p\",{children:result}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:goToManufacturerDashboard,children:\"Back to Dashboard\"})]});};export default MintProductPage;","map":{"version":3,"names":["React","useState","web3","contract","useNavigate","jsx","_jsx","jsxs","_jsxs","MintProductPage","serial","setSerial","name","setName","description","setDescription","manufactureDate","setManufactureDate","result","setResult","navigate","mintProduct","event","preventDefault","accounts","eth","getAccounts","length","userAddress","isNaN","product","serialNumber","methods","send","from","error","console","concat","message","goToManufacturerDashboard","className","children","onSubmit","type","value","onChange","e","target","placeholder","onClick"],"sources":["C:/Users/allen/Blockchain/product-authentication/src/components/mintProduct.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport web3 from '../SC/web3';\r\nimport contract from '../SC/contract';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../css_files/mint.css'\r\n\r\nconst MintProductPage = () => {\r\n    const [serial, setSerial] = useState(''); \r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState(''); \r\n    const [manufactureDate, setManufactureDate] = useState(''); \r\n    const [result, setResult] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const mintProduct = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            if (accounts.length === 0) {\r\n                setResult(\"No accessible accounts. Make sure MetaMask is connected.\");\r\n                return;\r\n            }\r\n            const userAddress = accounts[0];\r\n            if (isNaN(serial)) {\r\n                setResult(\"Invalid serial number. Please enter a numeric value.\");\r\n                return;\r\n            }\r\n            const product = {\r\n                name: name,\r\n                description: description,\r\n                serialNumber: serial,\r\n                manufactureDate: manufactureDate\r\n            };\r\n            await contract.methods.mintProduct(userAddress, serial, product).send({ from: userAddress });\r\n            setResult(`Product minted successfully`);\r\n\r\n            //THIS FOLLOWING CODE IS FOR VIEWING THE INFORMATION OF THE BLOCK\r\n            // const mintResult = await contract.methods.mintProduct(userAddress, serial, product).send({ from: userAddress });   \r\n            // const jsonHandler = (key, value) => \r\n            //     typeof value === 'bigint' ? value.toString() : value;          \r\n            // setResult(`Product minted successfully: ${JSON.stringify(mintResult, jsonHandler)}`);\r\n        } catch (error) {\r\n            console.error('Error minting product:', error);\r\n            setResult(`Failed to mint product: ${error.message}`);\r\n        }\r\n    };\r\n    \r\n    const goToManufacturerDashboard = () => {\r\n        navigate('/manufacturer-dashboard'); \r\n    };\r\n\r\n    return (\r\n        <div className=\"mint-container\">\r\n            <h2>Mint Product</h2>\r\n            <div className=\"form-container\">\r\n                <form onSubmit={mintProduct}>\r\n                    <input className=\"input-field\" type=\"text\" value={serial} onChange={(e) => setSerial(e.target.value)} placeholder=\"Serial Number\" />\r\n                    <input className=\"input-field\" type=\"text\" value={name} onChange={(e) => setName(e.target.value)} placeholder=\"Product Name\" />\r\n                    <input className=\"input-field\" type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} placeholder=\"Product Description\" />\r\n                    <input className=\"input-field\" type=\"text\" value={manufactureDate} onChange={(e) => setManufactureDate(e.target.value)} placeholder=\"Manufacture Date\" />\r\n                    <button className=\"button\" type=\"submit\">Mint Product</button>\r\n                </form>\r\n            </div>\r\n            {result && <p>{result}</p>}\r\n            <button className=\"button\" onClick={goToManufacturerDashboard}>Back to Dashboard</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MintProductPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}